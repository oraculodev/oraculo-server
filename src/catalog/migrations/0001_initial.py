# Generated by Django 3.2.25 on 2024-11-24 23:31

from django.db import migrations, models
import django.db.models.deletion
import taggit.managers
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0005_auto_20220424_2025'),
    ]

    operations = [
        migrations.CreateModel(
            name='AppClimateCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
            ],
            options={
                'verbose_name': 'App Climate Category',
                'verbose_name_plural': 'App Climate Categories',
            },
        ),
        migrations.CreateModel(
            name='AppClimateItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('doc_url', models.URLField(blank=True, null=True, verbose_name='documentation url')),
                ('category', models.ForeignKey(default=0, on_delete=django.db.models.deletion.DO_NOTHING, related_name='app_climate_items', to='catalog.appclimatecategory', verbose_name='category')),
            ],
            options={
                'verbose_name': 'App Climate Item',
                'verbose_name_plural': 'App Climate Items',
            },
        ),
        migrations.CreateModel(
            name='AppClimateScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('categories', models.ManyToManyField(blank=True, to='catalog.AppClimateCategory', verbose_name='categories')),
            ],
            options={
                'verbose_name': 'App Climate Score',
                'verbose_name_plural': 'App Climate Scores',
            },
        ),
        migrations.CreateModel(
            name='Component',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('description', models.TextField(blank=True, max_length=255, verbose_name='description')),
                ('repo_id', models.BigIntegerField(unique=True, verbose_name='repository id')),
                ('repo_url', models.URLField(unique=True, verbose_name='repository url')),
                ('repo_created_at', models.DateTimeField(blank=True, default=None, null=True, verbose_name='repository created at')),
                ('repo_updated_at', models.DateTimeField(blank=True, default=None, null=True, verbose_name='repository updated at')),
                ('repo_pushed_at', models.DateTimeField(blank=True, default=None, null=True, verbose_name='repository pushed at')),
                ('type', models.CharField(blank=True, choices=[('app', 'App'), ('api', 'Api'), ('docs', 'Docs'), ('library', 'Library'), ('service', 'Service'), ('website', 'Website')], default=None, max_length=50, null=True, verbose_name='type')),
                ('lifecycle', models.CharField(blank=True, choices=[('deprecated', 'Deprecated'), ('experimental', 'Experimental'), ('production', 'Production')], default=None, max_length=50, null=True, verbose_name='lifecycle')),
                ('context_level', models.CharField(blank=True, choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default=None, max_length=50, null=True, verbose_name='context level')),
                ('critical', models.BooleanField(default=False, verbose_name='critical')),
                ('cicd_url', models.URLField(blank=True, null=True, verbose_name='custom ci/cd url')),
                ('is_filled', models.BooleanField(default=False, verbose_name='infos up to date')),
                ('api_doc_url', models.URLField(blank=True, null=True, verbose_name='api doc url')),
                ('public_api_doc_url', models.URLField(blank=True, null=True, verbose_name='public api doc url')),
                ('components', models.ManyToManyField(blank=True, to='catalog.Component')),
            ],
            options={
                'verbose_name': 'Component',
                'verbose_name_plural': 'Components',
            },
        ),
        migrations.CreateModel(
            name='ComponentGroupLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('component', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='group_links', to='catalog.component', verbose_name='component')),
            ],
            options={
                'verbose_name': 'Group Link',
                'verbose_name_plural': 'Group Links',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('description', tinymce.models.HTMLField()),
                ('type', models.CharField(blank=True, choices=[('chapter', 'Chapter'), ('department', 'Department'), ('organization', 'Organization'), ('team', 'Team'), ('tribe', 'Tribe')], default=None, max_length=50, null=True, verbose_name='type')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('board_url', models.URLField(blank=True, null=True, verbose_name='board url')),
                ('design_url', models.URLField(blank=True, null=True, verbose_name='design url')),
            ],
            options={
                'verbose_name': 'Group',
                'verbose_name_plural': 'Groups',
            },
        ),
        migrations.CreateModel(
            name='GroupGroupLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('group', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='group_links', to='catalog.group', verbose_name='group')),
            ],
            options={
                'verbose_name': 'Group Link',
                'verbose_name_plural': 'Group Links',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('title', models.CharField(max_length=50, verbose_name='title')),
                ('description', models.TextField(max_length=255, verbose_name='description')),
                ('icon', models.CharField(max_length=50, verbose_name='icon (boxicons)')),
                ('url', models.URLField(verbose_name='url')),
            ],
            options={
                'verbose_name': 'Link',
                'verbose_name_plural': 'Links',
            },
        ),
        migrations.CreateModel(
            name='Macroarea',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('name', models.CharField(max_length=50, verbose_name='name')),
            ],
            options={
                'verbose_name': 'Macroarea',
                'verbose_name_plural': 'Macroareas',
            },
        ),
        migrations.CreateModel(
            name='ResourceType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('name', models.CharField(max_length=50, verbose_name='name')),
            ],
            options={
                'verbose_name': 'Resource Type',
                'verbose_name_plural': 'Resource Types',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('name', models.CharField(max_length=50, verbose_name='name')),
            ],
            options={
                'verbose_name': 'Role',
                'verbose_name_plural': 'Roles',
            },
        ),
        migrations.CreateModel(
            name='System',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('description', models.TextField(blank=True, max_length=255, verbose_name='description')),
                ('lifecycle', models.CharField(blank=True, choices=[('deprecated', 'Deprecated'), ('experimental', 'Experimental'), ('production', 'Production')], default=None, max_length=50, null=True, verbose_name='lifecycle')),
                ('groups', models.ManyToManyField(blank=True, to='catalog.Group', verbose_name='groups')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='tags')),
            ],
            options={
                'verbose_name': 'System',
                'verbose_name_plural': 'Systems',
            },
        ),
        migrations.CreateModel(
            name='SystemGroupLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('system', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='group_links', to='catalog.system', verbose_name='system')),
            ],
            options={
                'verbose_name': 'Group Link',
                'verbose_name_plural': 'Group Links',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SystemLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('text', models.CharField(max_length=200, verbose_name='text')),
                ('url', models.URLField(verbose_name='url')),
                ('group_link', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='links', to='catalog.systemgrouplink', verbose_name='link')),
            ],
            options={
                'verbose_name': 'Link',
                'verbose_name_plural': 'Links',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('description', models.TextField(blank=True, max_length=255, verbose_name='description')),
                ('lifecycle', models.CharField(blank=True, choices=[('deprecated', 'Deprecated'), ('experimental', 'Experimental'), ('production', 'Production')], default=None, max_length=50, null=True, verbose_name='lifecycle')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='resources', to='catalog.resourcetype', verbose_name='type')),
            ],
            options={
                'verbose_name': 'Resource',
                'verbose_name_plural': 'Resources',
            },
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('email', models.EmailField(blank=True, max_length=100, verbose_name='email')),
                ('role', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='members', to='catalog.role', verbose_name='role')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='tags')),
            ],
            options={
                'verbose_name': 'Member',
                'verbose_name_plural': 'Members',
            },
        ),
        migrations.CreateModel(
            name='GroupNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('title', models.CharField(max_length=50, verbose_name='title')),
                ('content', tinymce.models.HTMLField()),
                ('component', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='catalog.group', verbose_name='group')),
            ],
            options={
                'verbose_name': 'Note',
                'verbose_name_plural': 'Notes',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GroupLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('text', models.CharField(max_length=200, verbose_name='text')),
                ('url', models.URLField(verbose_name='url')),
                ('group_link', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='links', to='catalog.groupgrouplink', verbose_name='link')),
            ],
            options={
                'verbose_name': 'Link',
                'verbose_name_plural': 'Links',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='group',
            name='members',
            field=models.ManyToManyField(blank=True, related_name='groups', to='catalog.Member', verbose_name='members'),
        ),
        migrations.AddField(
            model_name='group',
            name='other_components',
            field=models.ManyToManyField(blank=True, related_name='groups', to='catalog.Component', verbose_name='other components'),
        ),
        migrations.AddField(
            model_name='group',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='catalog.group', verbose_name='pai'),
        ),
        migrations.AddField(
            model_name='group',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='tags'),
        ),
        migrations.CreateModel(
            name='ComponentNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('title', models.CharField(max_length=50, verbose_name='title')),
                ('content', tinymce.models.HTMLField()),
                ('component', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='catalog.component', verbose_name='component')),
            ],
            options={
                'verbose_name': 'Note',
                'verbose_name_plural': 'Notes',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ComponentLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('text', models.CharField(max_length=200, verbose_name='text')),
                ('url', models.URLField(verbose_name='url')),
                ('group_link', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='links', to='catalog.componentgrouplink', verbose_name='link')),
            ],
            options={
                'verbose_name': 'Link',
                'verbose_name_plural': 'Links',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='component',
            name='group_owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='components', to='catalog.group', verbose_name='owner'),
        ),
        migrations.AddField(
            model_name='component',
            name='macroarea',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='components', to='catalog.macroarea', verbose_name='macroarea'),
        ),
        migrations.AddField(
            model_name='component',
            name='resources',
            field=models.ManyToManyField(blank=True, related_name='compoments', to='catalog.Resource', verbose_name='resources'),
        ),
        migrations.AddField(
            model_name='component',
            name='system',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='components', to='catalog.system', verbose_name='system'),
        ),
        migrations.AddField(
            model_name='component',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='tags'),
        ),
        migrations.CreateModel(
            name='ComponentAppClimateScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('score', models.PositiveSmallIntegerField(default=0, verbose_name='score')),
                ('app_climate_score', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='app_climate_scores', to='catalog.appclimatescore', verbose_name='score')),
                ('component', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='component_app_climate_scores', to='catalog.component', verbose_name='component')),
            ],
            options={
                'verbose_name': 'Component - App Climate Score',
                'verbose_name_plural': 'Component - App Climate Scores',
                'unique_together': {('component', 'app_climate_score')},
            },
        ),
        migrations.CreateModel(
            name='ComponentAppClimate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('is_check', models.BooleanField(default=False, verbose_name='is check')),
                ('not_apply', models.BooleanField(default=False, verbose_name='not apply')),
                ('app_climate_item', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='app_climate_components', to='catalog.appclimateitem', verbose_name='item')),
                ('component', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='app_climate_components', to='catalog.component', verbose_name='component')),
            ],
            options={
                'verbose_name': 'Component - App Climate',
                'verbose_name_plural': 'Components - App Climate',
                'unique_together': {('component', 'app_climate_item')},
            },
        ),
    ]
